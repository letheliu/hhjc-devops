package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resources_app_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcd\x8a\x13\x41\x10\x80\xef\xfd\x14\x05\xb9\x26\x4c\x4f\x30\x32\xf4\x4d\xc7\x44\x10\xa2\x82\xc9\x49\x64\xa8\xcc\x54\x66\x5a\xbb\xbb\x86\xfe\x71\xe2\x03\x88\x78\xf0\x05\x7c\x04\x0f\xb9\x7b\xd8\xb7\xd9\x65\x77\xdf\x62\x99\x61\x97\xec\xad\xe0\x2b\xbe\xfa\xaa\x64\x77\xd4\x6d\xf2\x18\x35\x3b\x25\x00\xde\xe8\x80\x07\x43\x1f\x31\x76\x25\x7b\x4f\xf5\x04\xe0\x88\x26\x90\x00\x58\xbb\x27\xba\x0e\x35\xf6\x74\x21\x1b\xed\x69\x4b\xb1\xe3\xe6\x3d\xc7\x57\xc6\xf0\x40\xcd\x85\x3e\x6a\x5f\x73\xf3\xa3\x64\x17\x92\xed\x47\xef\x07\xb7\x77\x16\x7d\xe8\xd0\x28\x88\x3e\x8d\x9b\x3b\x6d\x69\xc3\xde\x62\x54\xb0\x65\x37\x07\x99\xc3\x3b\x74\xb0\x94\xf2\x25\xe4\x2b\x25\x5f\x28\xb9\x82\xb7\xdb\x9d\x00\x28\x3b\xf4\x81\xa2\x82\xfd\x6e\xb3\x28\x84\x98\xdd\xfd\xfa\x77\x73\xfe\x7b\xfd\xff\xf7\xfd\xcf\x3f\xb7\x57\x67\xc1\xc3\xf4\x54\xa0\x1e\x3d\xc6\x67\xb5\x3d\xfb\xa8\xa0\x28\x8a\x42\x00\xe8\xd6\xb1\xa7\x2a\x79\x13\x14\x7c\xce\xb0\xd7\x19\x36\x56\xbb\x2c\x05\xf2\x99\xe1\x56\xbb\x39\x64\x54\x77\xfc\x45\x00\x7c\x1d\x62\x15\xb5\x25\x4e\x51\x41\xbe\x94\x30\xb3\xda\xa5\x38\x5a\x0d\xb7\x95\xa1\xef\x64\x14\x34\x74\x48\xed\x74\xba\xf6\x63\xe1\xe9\x74\x5a\x7c\x9a\x66\x01\x30\xd0\x21\x70\xfd\x8d\x62\xd5\x33\x1b\x05\xb9\x94\x02\xa0\x61\x8b\xda\x29\xc0\x87\x00\x00\x00\xff\xff\xfc\x8e\xb0\xe5\x95\x01\x00\x00")

func resources_app_yaml() ([]byte, error) {
	return bindata_read(
		_resources_app_yaml,
		"resources/app.yaml",
	)
}

var _resources_db_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x4a\x33\x41\x14\x46\xfb\x79\x8a\x0f\xfe\x3e\xec\xfe\xab\x49\xbc\x95\x60\x25\x08\x16\x79\x82\xd9\x9d\x6b\x76\x65\x92\x49\x66\x66\x13\x4d\x95\xc2\xc6\x46\x0b\x09\x82\x88\x58\x44\x82\xdd\x6a\x29\x82\x4f\xb3\x1b\x7d\x0b\xd9\x4d\x40\x6d\xcf\x3d\x7c\xe7\x5a\x56\x99\x23\x01\x48\xa5\x2c\x41\xf1\xa4\xd5\xa0\xd6\xa9\x9c\xc8\x30\x0c\x5a\x89\x19\x50\x3b\xea\xec\x09\x60\x24\x9d\x9b\x1a\xab\x08\x69\x22\x00\x15\x13\xc2\x1a\x1b\xa3\x7b\xd9\x8c\x09\x61\x10\x08\x21\x06\xe7\x6e\xac\xeb\x49\x95\x49\xcd\x89\x27\x34\x44\x00\xa9\x71\x7e\xd3\x50\xf1\xef\x40\x33\x62\x3d\x21\x8a\x82\xb6\x00\x72\xc7\x96\x30\xcb\x52\x69\xfe\x64\x1b\xb2\x1f\xfe\x8f\x76\x76\xdb\x9d\x6e\x5d\x90\x5e\xc6\xd2\xf1\x8f\x9c\xa4\xd2\x3a\xf6\x84\xdc\x9f\xd4\x86\x4b\xcd\xb4\x37\xd6\x04\x6f\x73\x16\x80\x36\xfd\x23\x9e\xb0\xae\xdf\x88\xf3\xbe\x00\x06\xf2\xec\x78\xc4\xc3\x03\x33\x1c\x3a\x42\x37\x08\xf0\x0f\xd5\xfd\xbc\x5c\xae\xaa\xcb\x9b\xf2\x7d\xfe\xf9\xf1\x50\x5d\x3d\x55\x8b\x62\xe3\x1e\x2a\xcd\x5b\x37\x6c\xdc\xed\xfd\xe5\x71\x7d\x77\xb1\x7e\x7e\xfb\xba\x7d\xad\x16\x45\xb9\x5c\x95\xc5\xb5\xf8\x0e\x00\x00\xff\xff\xcd\xce\xcb\xff\x5e\x01\x00\x00")

func resources_db_yaml() ([]byte, error) {
	return bindata_read(
		_resources_db_yaml,
		"resources/db.yaml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resources/app.yaml": resources_app_yaml,
	"resources/db.yaml": resources_db_yaml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resources": &_bintree_t{nil, map[string]*_bintree_t{
		"app.yaml": &_bintree_t{resources_app_yaml, map[string]*_bintree_t{
		}},
		"db.yaml": &_bintree_t{resources_db_yaml, map[string]*_bintree_t{
		}},
	}},
}}
